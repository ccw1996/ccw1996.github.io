"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[5483],{4408:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"cuda/element","title":"element \u64cd\u4f5c","description":"\u8bbe\u7f6e\u5408\u7406\u7684 BlockSize \u548c GridSize","source":"@site/docs/cuda/element.md","sourceDirName":"cuda","slug":"/cuda/element","permalink":"/docs/cuda/element","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/docs/cuda/element.md","tags":[{"inline":true,"label":"work","permalink":"/docs/tags/work"}],"version":"current","lastUpdatedAt":1740785860000,"frontMatter":{"title":"element \u64cd\u4f5c","tags":["work"],"editor":"caroot"},"sidebar":"tutorialSidebar","previous":{"title":"cuda stream","permalink":"/docs/cuda/cuda_stream"},"next":{"title":"\u8bbe\u7f6ecuda kernel\u4e2d\u7684grid_size\u548cblock_size","permalink":"/docs/cuda/grid_size\u548cblock_size"}}');var i=n(4848),l=n(8453);const r={title:"element \u64cd\u4f5c",tags:["work"],editor:"caroot"},s=void 0,a={},o=[{value:"\u8bbe\u7f6e\u5408\u7406\u7684 BlockSize \u548c GridSize",id:"\u8bbe\u7f6e\u5408\u7406\u7684-blocksize-\u548c-gridsize",level:3},{value:"\u800c Grid Size \u5927\u5c0f\u7684\u8bbe\u7f6e\u89c4\u5219\u5728\xa0 <code>GetNumBlocks</code> \xa0\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff1a",id:"\u800c-grid-size-\u5927\u5c0f\u7684\u8bbe\u7f6e\u89c4\u5219\u5728-getnumblocks-\u8fd9\u4e2a\u51fd\u6570\u4e2d",level:2},{value:"\u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c",id:"\u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c",level:3},{value:"\u8c03\u7528\u94fe",id:"\u8c03\u7528\u94fe",level:3},{value:"\u9488\u5bf9 half2 \u6570\u636e\u7c7b\u578b\u4f18\u5316",id:"\u9488\u5bf9-half2-\u6570\u636e\u7c7b\u578b\u4f18\u5316",level:3},{value:"\u6269\u5c55\u591a\u5143\u64cd\u4f5c",id:"\u6269\u5c55\u591a\u5143\u64cd\u4f5c",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"// Write ReLU Functor. \ntemplate<typename T>\nstruct ReluFunctor {\n  OF_DEVICE_FUNC T operator()(T x) const {\n    const T zero_val = static_cast<T>(0); \n    return (x > zero_val) ? x : zero_val; \n  }\n};\n\n// Use CUDA Elementwise Template. \nOF_CUDA_CHECK((cuda::elementwise::Unary(ReluFunctor<T>(), elem_cnt, dx->mut_dptr<T>(),\n                                        x->dptr<T>(), ctx->stream()->As<ep::CudaStream>()->cuda_stream())));\n"})}),"\n",(0,i.jsx)(t.h3,{id:"\u8bbe\u7f6e\u5408\u7406\u7684-blocksize-\u548c-gridsize",children:"\u8bbe\u7f6e\u5408\u7406\u7684 BlockSize \u548c GridSize"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"\u8bbe\u7f6eCUDA Kernel\u4e2d\u7684grid_size\u548cblock_size"}),"\n",(0,i.jsx)(t.li,{children:"\u4e3b\u6d41\u67b6\u6784\u91cc\uff0c\u6bcf\u4e2a Block \u6700\u5927\u5bc4\u5b58\u5668\u6570\u91cf\u662f 64 K"}),"\n",(0,i.jsx)(t.li,{children:"\u6bcf\u4e2a\u7ebf\u7a0b\u6240\u80fd\u4f7f\u7528\u7684\u6700\u5927\u5bc4\u5b58\u5668\u6570\u91cf\u662f 255 \u4e2a"}),"\n",(0,i.jsxs)(t.li,{children:["\u5728\u4f7f\u7528\u6700\u5927\u5bc4\u5b58\u5668\u6570\u91cf\u7684\u524d\u63d0\u4e0b\uff0c\u90a3\u6bcf\u4e2a Block \u6700\u591a\u80fd\u542f\u52a8\xa0 ",(0,i.jsx)(t.code,{children:"64 * 1024 / 255 = 256"})," \xa0\u4e2a\u7ebf\u7a0b\uff08\u5f802\u7684\u500d\u6570\u53d6\u6574\uff09,\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u8bbe\u5b9a\u4e86\u4e00\u4e2a\u5e38\u91cf\xa0 ",(0,i.jsx)(t.code,{children:"constexpr int kBlockSize = 256;"})," \u3002"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.h2,{id:"\u800c-grid-size-\u5927\u5c0f\u7684\u8bbe\u7f6e\u89c4\u5219\u5728-getnumblocks-\u8fd9\u4e2a\u51fd\u6570\u4e2d",children:["\u800c Grid Size \u5927\u5c0f\u7684\u8bbe\u7f6e\u89c4\u5219\u5728\xa0 ",(0,i.jsx)(t.code,{children:"GetNumBlocks"})," \xa0\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff1a"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t\t  constexpr int kBlockSize = 256\n\t\t\t  constexpr int kNumWaves = 32;\n\t\t\t  \n\t\t\t  inline cudaError_t GetNumBlocks(int64_t n, int* num_blocks) {\n\t\t\t    ...\n\t\t\t    /*\n\t\t\t    n: The number of the elements. \n\t\t\t    sm_count: The number of the SM. \n\t\t\t    tpm: The maximum resident threads in per multiprocessor. \n\t\t\t    */\n\t\t\t    *num_blocks = std::max<int>(1, std::min<int64_t>((n + kBlockSize - 1) / kBlockSize,\n\t\t\t                                                     sm_count * tpm / kBlockSize * kNumWaves));\n\t\t\t    return cudaSuccess;\n\t\t\t  }\n"})}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"\u7ebf\u7a0b\u5757\u6700\u5c0f\u4e2a\u6570\u4e3a1"}),"\n",(0,i.jsxs)(t.li,{children:["\u7ebf\u7a0b\u5757\u6700\u5927\u4e2a\u6570\u662f\u4ece\xa0 ",(0,i.jsx)(t.code,{children:"\u5904\u7406\u6240\u6709\u5143\u7d20\u6240\u9700\u6700\u5c0f\u7684\u7ebf\u7a0b\u603b\u6570"})," \xa0\u548c\xa0 ",(0,i.jsx)(t.code,{children:"wave \u6570\u76ee*GPU \u4e00\u6b21\u53ef\u4ee5\u8c03\u5ea6 SM \u6570\u91cf * \u6bcf\u4e2a SM \u6700\u5927 block \u6570"})," \xa0\u4e2d\u53d6\u6700\u5c0f\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u7684 wave \u6570\u76ee\u8bbe\u7f6e\u4e3a\u56fa\u5b9a32\u5927\u5c0f"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"\u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c",children:"\u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"\u5927\u90e8\u5206 Elementwise \u7b97\u5b50\u7684\u8ba1\u7b97\u903b\u8f91\u8f83\u4e3a\u7b80\u5355\uff0c\u74f6\u9888\u4e3b\u8981\u662f\u5728\u5e26\u5bbd\u5229\u7528\u4e0a\u3002"}),"\n",(0,i.jsxs)(t.li,{children:["\u800c CUDA \u91cc\u4e5f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6570\u636e\u7c7b\u578b\u6765\u652f\u6301\u5411\u91cf\u5316\u64cd\u4f5c\uff0c\u5982 ",(0,i.jsx)(t.code,{children:"float2"})," \uff0c ",(0,i.jsx)(t.code,{children:"float4"})," \uff0c\u5c31\u662f\u5c062\u4e2a\u62164\u4e2a float \u6570\u636e\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u3002\u5728\u4e00\u4e9b\u9ad8\u6027\u80fd\u8bad\u7ec3\u63a8\u7406\u5e93\u5982\xa0 ",(0,i.jsx)(t.code,{children:"LightSeq"})," \xa0\u5c31\u4f7f\u7528\u4e86\u5927\u91cf\u7684\xa0 ",(0,i.jsx)(t.code,{children:"float4"})," \xa0\u7c7b\u578b\uff1a","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t  template <typename T>\n\t\t  __global__ void ker_layer_norm(T *ln_res, T *vars, T *means, const T *inp,\n\t\t                                 const T *scale, const T *bias, int hidden_size) {\n\t\t    // step 0. compute local sum\n\t\t    float l_sum = 0;\n\t\t    float l_square_sum = 0;\n\t\t    const float4 *inp_f4 = (const float4 *)inp + blockIdx.x * hidden_size; // use float4\n\t\t    for (uint idx = threadIdx.x; idx < hidden_size; idx += blockDim.x) {\n\t\t      float4 val = inp_f4[idx];\n\t\t      ...\n\t\t    }\n\t\t  }\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\u5728\u5b9e\u9645\u4e2d\uff0c\u6211\u4eec\u7684\u7b97\u5b50\u9700\u8981\u652f\u6301\u4e0d\u540c\u6570\u636e\u7c7b\u578b(\u5982 int, half)\uff0c\u5982\u679c\u91c7\u7528 CUDA \u5185\u7f6e\u7684\u5411\u91cf\u5316\u6570\u636e\u7c7b\u578b\u64cd\u4f5c\uff0c\u663e\u7136\u8981\u7ed9\u6bcf\u4e2a\u7b97\u5b50\u5199\u591a\u4e2a\u7248\u672c\uff0c\u589e\u52a0\u4e86\u5f00\u53d1\u8d1f\u62c5\u3002\u4e3a\u6b64\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\xa0 ",(0,i.jsx)(t.code,{children:"Pack"})," \xa0\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u7075\u6d3b\u652f\u6301\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u5411\u91cf\u5316\u3002"]}),"\n",(0,i.jsxs)(t.li,{children:["\u6211\u4eec\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a\xa0 ",(0,i.jsx)(t.code,{children:"PackType"})," \xa0\u7c7b\u578b\u7c7b\u578b\u6765\u4ee3\u8868\u5411\u91cf\u5316\u7684\u6570\u636e\uff0c\u5b83\u4ee3\u8868\u7684\uff08\u5411\u91cf\u5316\u540e\u7684\uff09\u6570\u636e\u5927\u5c0f\u4e3a\xa0 ",(0,i.jsx)(t.code,{children:"sizeof(T) * pack_size"})," \u3002"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t  template<typename T, int pack_size>\n\t\t  struct GetPackType {\n\t\t    using type = typename std::aligned_storage<pack_size * sizeof(T), pack_size * sizeof(T)>::type;\n\t\t  };\n\t\t  \n\t\t  template<typename T, int pack_size>\n\t\t  using PackType = typename GetPackType<T, pack_size>::type;\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\u7136\u540e\u5b9e\u73b0\u4e86\u4e00\u4e2a\xa0 ",(0,i.jsx)(t.code,{children:"union"})," \xa0\u7c7b\u578b\xa0 ",(0,i.jsx)(t.code,{children:"Pack"})," \uff0c\u5b83\u5185\u90e8\u5b9a\u4e49\u4e86\xa0 ",(0,i.jsx)(t.code,{children:"PackType<T, pack_size> storage;"})," \xa0\u6765\u5360\u7528\u7a7a\u95f4\uff1a"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:'\t\t  template<typename T, int pack_size>\n\t\t  union Pack {\n\t\t    static_assert(sizeof(PackType<T, pack_size>) == sizeof(T) * pack_size, "");\n\t\t    __device__ Pack() {\n\t\t      // do nothing\n\t\t    }\n\t\t    PackType<T, pack_size> storage;\n\t\t    T elem[pack_size];\n\t\t  };\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\u4e0e\xa0 ",(0,i.jsx)(t.code,{children:"storage"})," \xa0\u5171\u4eab\u5185\u5b58\u7684\uff0c\u8fd8\u6709\xa0 ",(0,i.jsx)(t.code,{children:"T elem[pack_size];"})," \xa0\u3002",(0,i.jsx)(t.strong,{children:"\u8fd9\u6837\u65b9\u4fbf\u540e\u7eed\u7684 Elementwise \u64cd\u4f5c\uff1a\u5728\u540e\u7eed\u8ba1\u7b97\u91cc\uff0c\u6211\u4eec\u5bf9"}),"\xa0",(0,i.jsx)(t.strong,{children:"elem"}),"\xa0",(0,i.jsxs)(t.strong,{children:["\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u7528 ",(0,i.jsx)(t.code,{children:"functor"})," \uff0c\u5f97\u5230\u8f93\u51fa\u7ed3\u679c\u3002"]})]}),"\n",(0,i.jsxs)(t.li,{children:["CUDA \u91cc\u6700\u5927\u652f\u6301128 bit \u7684 pack \u5927\u5c0f\uff0c\u800c\u5728\u6d6e\u70b9\u6570\u636e\u7c7b\u578b\u4e2d\uff0c\u6700\u5c0f\u7684\u7c7b\u578b\uff08half\uff09\u5927\u5c0f\u4e3a16 bit\uff0c\u6700\u591a\u80fd\u628a128 / 16=8 \u4e2a half \u6570\u636e pack \u5230\u4e00\u8d77\uff0c\u56e0\u6b64\u6211\u4eec\u8bbe\u7f6e\u4e86\u8fd9\u4e24\u4e2a\u5e38\u91cf\uff0c ",(0,i.jsx)(t.code,{children:"kMaxPackBytes"})," \xa0\u8868\u793a pack \u6700\u5927\u5b57\u8282\u6570\uff0c ",(0,i.jsx)(t.code,{children:"kMaxPackSize"})," \xa0\u8868\u793a pack \u6570\u636e\u7684\u6700\u5927\u4e2a\u6570"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"\u8c03\u7528\u94fe",children:"\u8c03\u7528\u94fe"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["\u8ddf\u8e2a\xa0 ",(0,i.jsx)(t.code,{children:"oneflow/core/cuda/elementwise.cuh"})," \xa0\u4e2d\u7684\u5b9e\u73b0\uff0c\u4f1a\u53d1\u73b0\uff0c\u8fd9\u5957\u6a21\u677f\u4f1a\u5206\u522b\u4e3a\u4e00\u5143\u3001\u4e8c\u5143\u3001\u4e09\u5143\u7684 Elementwise \u63d0\u4f9b\u63a5\u53e3\uff1a ",(0,i.jsx)(t.code,{children:"Unary"})," \u3001 ",(0,i.jsx)(t.code,{children:"Binary"})," \u3001 ",(0,i.jsx)(t.code,{children:"Ternary"})," \uff0c\u6587\u7ae0\u5f00\u59cb\u5904\u7684\xa0 ",(0,i.jsx)(t.code,{children:"ReLU"})," \xa0\u7b97\u5b50\u5c31\u4f7f\u7528\u4e86\xa0 ",(0,i.jsx)(t.code,{children:"Unary"})," \xa0\u7684\u63a5\u53e3\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["\u8fdb\u4e00\u6b65\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u4eec\u7ecf\u8fc7\u5c42\u5c42\u8c03\u7528\u540e\uff0c\u5176\u5b9e\u6700\u7ec8\u90fd\u4f1a\u8c03\u7528\u5230\xa0 ",(0,i.jsx)(t.code,{children:"ApplyGeneric"})," \uff0c\u57fa\u672c\u8c03\u7528\u5173\u7cfb\u5982\u4e0b\uff1a"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:"Unary/Binary/Ternary -> xxxFactory -> GenericLauncher<...>::Launch -> ApplyGeneric(CUDA Kernel)  \n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"ApplyGeneric"})," \xa0\u8fd9\u4e2a CUDA Kernel \u4e2d\u6240\u505a\u7684\u4e3b\u8981\u5de5\u4f5c\u662f\uff1a"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\u6839\u636e\u53c2\u6570\u521b\u5efa\u4e00\u4e2a\xa0 ",(0,i.jsx)(t.code,{children:"functor"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u8fdb\u5165\u5faa\u73af\uff0c\u9488\u5bf9\u6253\u5305\uff08pack\uff09\u540e\u7684\u6570\u636e\uff0c\u8c03\u7528\xa0 ",(0,i.jsx)(t.code,{children:"ApplyPack"})," \xa0\u51fd\u6570\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21\xa0 ",(0,i.jsx)(t.code,{children:"ApplyPack"})," \uff0c\u5c31\u5904\u7406\u4e00\u6279 pack \u540e\u7684\u6570\u636e"]}),"\n",(0,i.jsxs)(t.li,{children:["\u5f53\u6700\u540e\u5b58\u5728\u5143\u7d20\u4e2a\u6570\u4e0d\u80fd\u88ab\xa0 ",(0,i.jsx)(t.code,{children:"pack_size"})," \xa0\u6574\u9664\u7684\u60c5\u51b5\u65f6\uff0c\u9700\u8981\u8ba9\u7ebf\u7a0b\u5904\u7406\u4e0b\u5c3e\u90e8\u5269\u4f59\u5143\u7d20"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t  template<int pack_size, bool tail, typename FactoryT, typename R, typename... IN>\n\t\t  __global__ void __launch_bounds__(kBlockSize)\n\t\t      ApplyGeneric(FactoryT factory, int64_t n_pack, PackType<R, pack_size>* pack_r,\n\t\t                   const PackType<IN, pack_size>*... pack_in, int64_t n_tail, R* tail_r,\n\t\t                   const IN*... tail_in) {\n\t\t    auto functor = factory();\n\t\t    const int global_tid = blockIdx.x * kBlockSize + threadIdx.x;\n\t\t    for (int64_t i = global_tid; i < n_pack; i += blockDim.x * gridDim.x) {\n\t\t      pack_r[i] = ApplyPack<pack_size, decltype(functor), R, IN...>(\n\t\t          functor, (FetchPack<IN, pack_size>(pack_in + i).elem)...);\n\t\t    }\n\t\t    if (tail && global_tid < n_tail) { tail_r[global_tid] = functor((tail_in[global_tid])...); }\n\t\t  }\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"ApplyPack"})," \u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff0c\u5b83\u5bf9\u4e00\u4e2a\xa0 ",(0,i.jsx)(t.code,{children:"pack"})," \xa0\u5185\u7684\u5143\u7d20\u505a\u4e86\u4e2a\u5faa\u73af\uff0c\u5bf9\xa0 ",(0,i.jsx)(t.code,{children:"elem"})," \xa0\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\xa0 ",(0,i.jsx)(t.code,{children:"functor"})," \xa0\uff0c\u5f97\u5230\u8f93\u51fa\u7ed3\u679c\u5e76\u8fd4\u56de\uff1a"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t  template<int pack_size, typename FunctorT, typename R, typename... IN>\n\t\t  __device__\n\t\t      typename std::enable_if<HasApply2<FunctorT>::value == false, PackType<R, pack_size>>::type\n\t\t      ApplyPack(const FunctorT& functor, const IN... in[pack_size]) {\n\t\t    Pack<R, pack_size> ret;\n\t\t  #pragma unroll\n\t\t    for (int j = 0; j < pack_size; ++j) { ret.elem[j] = functor((in[j])...); }\n\t\t    return ret.storage;\n\t\t  }\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"\u9488\u5bf9-half2-\u6570\u636e\u7c7b\u578b\u4f18\u5316",children:"\u9488\u5bf9 half2 \u6570\u636e\u7c7b\u578b\u4f18\u5316"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["CUDA \u5b98\u65b9\u6709\u9488\u5bf9 half2 \u63a8\u51fa\u4e00\u7cfb\u5217\u7279\u6b8a\u6307\u4ee4\uff0c\u5982\xa0 ",(0,i.jsx)(t.code,{children:"hadd2"})," \xa0\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e24\u4e2a\xa0 ",(0,i.jsx)(t.code,{children:"half2"})," \xa0\u6570\u636e\u7684\u52a0\u6cd5\uff0c\u8fdb\u800c\u63d0\u9ad8\u541e\u5410\u91cf\u3002"]}),"\n",(0,i.jsxs)(t.li,{children:["\u8003\u8651\u5230\u8fd9\u79cd\u60c5\u51b5\uff0cOneFlow \u7ed9\xa0 ",(0,i.jsx)(t.code,{children:"ApplyPack"})," \xa0\u51fd\u6570\u7279\u5316\u4e86\u4e00\u4e2a\u7248\u672c\uff0c\u901a\u8fc7\u8c03\u7528 functor \u7684\xa0 ",(0,i.jsx)(t.code,{children:"apply2"})," \xa0\u51fd\u6570\uff0c\u6765\u8c03\u7528 half2 \u76f8\u5173\u7279\u6b8a\u6307\u4ee4\uff0c\u63a5\u53e3\u5982\u4e0b"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t  template<int pack_size, typename FunctorT, typename R, typename... IN>\n\t\t  __device__ typename std::enable_if<HasApply2<FunctorT>::value == true && pack_size % 2 == 0,\n\t\t                                     PackType<R, pack_size>>::type\n\t\t  ApplyPack(const FunctorT& functor, const IN... in[pack_size]) {\n\t\t    Pack<R, pack_size> ret;\n\t\t  #pragma unroll\n\t\t    for (int j = 0; j < pack_size; j += 2) { functor.Apply2(ret.elem + j, (in + j)...); }\n\t\t    return ret.storage;\n\t\t  }\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\u4ee5\u5148\u524d\u7684\xa0 ",(0,i.jsx)(t.code,{children:"Cast"})," \xa0\u7b97\u5b50\u4e3a\u4f8b\uff0c\u6211\u4eec\u5728\xa0 ",(0,i.jsx)(t.code,{children:"CastFunctor"})," \xa0\u5185\u90e8\u901a\u8fc7\u8c03\u7528\xa0 ",(0,i.jsx)(t.code,{children:"__float22half2_rn"})," \xa0\u6307\u4ee4\uff0c\u5c06\u4e00\u4e2a float2 \u6570\u636e\u8f6c\u6362\u4e3a\u4e00\u4e2a half2 \u6570\u636e\u3002"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t  template<typename From>\n\t\t  struct CastFunctor<half, From, typename std::enable_if<!std::is_same<From, half>::value>::type> {\n\t\t    ...\n\t\t  \n\t\t    __device__ void Apply2(half* to, const From* from) const {\n\t\t      float2 f2;\n\t\t      f2.x = static_cast<float>(from[0]);\n\t\t      f2.y = static_cast<float>(from[1]);\n\t\t      *reinterpret_cast<half2*>(to) = __float22half2_rn(f2);\n\t\t    }\n\t\t  };\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.h3,{id:"\u6269\u5c55\u591a\u5143\u64cd\u4f5c",children:"\u6269\u5c55\u591a\u5143\u64cd\u4f5c"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\u5c06 Elementwise \u7b97\u5b50\u8fdb\u4e00\u6b65\u5206\u4e3a\u4e00\u5143\u3001\u4e8c\u5143\u3001\u4e09\u5143\u64cd\u4f5c\u3002\u5e76\u5229\u7528\u5de5\u5382\u6a21\u5f0f\uff0c\u4f7f\u5f97\u4ed6\u4eec\u6700\u7ec8\u7edf\u4e00\u8c03\u7528\xa0 ",(0,i.jsx)(t.code,{children:"ApplyGeneric"})," \u3002\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u5f0f\u6613\u4e8e\u62d3\u5c55\uff1a\u5f53\u9700\u8981\u652f\u6301\u66f4\u591a\u8f93\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u53ea\u9700\u8981\u7f16\u5199\u5bf9\u5e94\u7684\u5de5\u5382\u5373\u53ef\u3002"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cuda",children:"\t\t  template<typename FunctorT>\n\t\t  struct SimpleFactory {\n\t\t    explicit SimpleFactory(FunctorT functor) : tpl(functor) {}\n\t\t    __device__ FunctorT operator()() const { return tpl; }\n\t\t  \n\t\t   private:\n\t\t    FunctorT tpl;\n\t\t  };\n\t\t  \n\t\t  template<typename FactoryT, typename R, typename A>\n\t\t  inline cudaError_t UnaryWithFactory(FactoryT factory, int64_t n, R* r, const A* a,\n\t\t                                      cudaStream_t stream) {\n\t\t    return GenericLauncher<FactoryT, R, A>::Launch(factory, n, r, a, stream);\n\t\t  }\n\t\t  \n\t\t  template<typename FunctorT, typename R, typename A>\n\t\t  inline cudaError_t Unary(FunctorT functor, int64_t n, R* r, const A* a, cudaStream_t stream) {\n\t\t    return UnaryWithFactory(SimpleFactory<FunctorT>(functor), n, r, a, stream);\n\t\t  }\n\t\t  \n\t\t  // BinaryWithFactory TernaryWithFactory ... \n\t\t  // Binary Ternary ... \n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var c=n(6540);const i={},l=c.createContext(i);function r(e){const t=c.useContext(l);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),c.createElement(l.Provider,{value:t},e.children)}}}]);