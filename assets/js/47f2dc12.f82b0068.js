"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[7994],{8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var d=t(6540);const a={},r=d.createContext(a);function c(e){const n=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),d.createElement(r.Provider,{value:n},e.children)}},8497:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"cuda/shared_memory","title":"shared_memory","description":"cudaEvent_t","source":"@site/docs/cuda/shared_memory.md","sourceDirName":"cuda","slug":"/cuda/shared_memory","permalink":"/docs/cuda/shared_memory","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/docs/cuda/shared_memory.md","tags":[{"inline":true,"label":"work","permalink":"/docs/tags/work"}],"version":"current","lastUpdatedAt":1740785860000,"frontMatter":{"title":"shared_memory","tags":["work"]},"sidebar":"tutorialSidebar","previous":{"title":"CUDA Memory\u5185\u5b58\u6a21\u578b","permalink":"/docs/cuda/memory"},"next":{"title":"design_model","permalink":"/docs/design_model/"}}');var a=t(4848),r=t(8453);const c={title:"shared_memory",tags:["work"]},i="\u7edf\u8ba1\u65f6\u95f4",s={},o=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\u7edf\u8ba1\u65f6\u95f4",children:"\u7edf\u8ba1\u65f6\u95f4"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"cudaEvent_t"}),"\n\u8c03\u7528\u65f6\uff0c"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cuda",children:"cudaEventRecord(g_start,0);\ncudaEventRecord(g_end,0);\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u7edf\u8ba1\u65f6"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cuda",children:"float timeElasped;\ncudaEventSynchronize(g_start);\ncudaEventSynchronize(g_end);\ncudaEventElaspsedTime(&timeElasped,g_start,g_end);\nstd::cout<<timeElasped<<std::end;\n"})}),"\n",(0,a.jsx)(n.h1,{id:"\u9759\u6001\u5171\u4eab\u53d8\u91cf",children:"\u9759\u6001\u5171\u4eab\u53d8\u91cf"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cuda",children:"__global__ void MatmulSharedStaticKernel(float *M_device,,float *N_device,float *P_device,int width){\n    __shared__ float M_deviceShared[BLOCKSIZE][BLOCKSIZE];\n    __shared__ float N_deviceShared[BLOCKSIZE][BLOCKSIZE];\n\n    int x=blockIdx.x*BLOCKSIZE+threadIdx.x;\n    int y=blockIdx.y*BLOCKSIZE+threadIdx.y;\n\n    float P_element=0.0;\n\n    int ty=threadIdx.y;\n    int tx=threadIdx.x;\n\n    for(int m=0;m<width/BLOCKSIZE;m++){\n        M_deviceShared[ty][tx]=M_device[y*width+(m*BLOCKSIZE+tx)];\n        N_deviceShared[ty][tx]=N_device[(m*BLOCKSIZE+ty)*width+x];\n        __syncthreads();\n\n        for(int k=0;k<BLOCKSIZE;k++){\n            P_element+=M_deviceShared[ty][k]*N_deviceShared[k][tx];\n        }\n        __syncthreads();\n    }\n\n    P_device[y*width+x]=P_element;\n}\n"})}),"\n",(0,a.jsx)(n.h1,{id:"\u52a8\u6001\u5171\u4eab\u53d8\u91cf",children:"\u52a8\u6001\u5171\u4eab\u53d8\u91cf"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cuda",children:"__global__ void MatmulSharedStaticKernel(float *M_device,,float *N_device,float *P_device,int width){\n    /*\n    \u6ce8\u610f\u4e0d\u80fd\u8fd9\u6837\u5b9a\u4e49\uff1a\n    __shared__ float M_deviceShared[];\n    __shared__ float N_deviceShared[];\n    \u56e0\u4e3a\u5728cuda\u4e2d\u5b9a\u4e49\u52a8\u6001\u5171\u4eab\u53d8\u91cf\u7684\u8bdd\uff0c\u65e0\u8bba\u5b9a\u4e49\u591a\u5c11\u4e2a\u4ed6\u4eec\u7684\u5730\u5740\u90fd\u662f\u4e00\u6837\u7684\n    \u6240\u4ee5\u5982\u679c\u60f3\u8981\u5411\u4e0a\u9762\u8fd9\u6837\u4f7f\u7528\u7684\u8bdd\uff0c\u9700\u8981\u7528\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411shared memory\u7684\u4e0d\u540c\u4f4d\u7f6e\u624d\u884c\u3002\n    */\n\n    extern __shared__ float deviceShared[];\n    int stride=blockSize*blockSize;\n\n    int x=blockIdx.x*BLOCKSIZE+threadIdx.x;\n    int y=blockIdx.y*BLOCKSIZE+threadIdx.y;\n\n    float P_element=0.0;\n\n    int ty=threadIdx.y;\n    int tx=threadIdx.x;\n\n    for(int m=0;m<width/BLOCKSIZE;m++){\n        deviceShared[ty*blockSize+tx]=M_device[y*width+(m*BLOCKSIZE+tx)];\n        deviceShared[stride+(ty*blockSize+tx)]=N_device[(m*BLOCKSIZE+ty)*width+x];\n        __syncthreads();\n\n        for(int k=0;k<BLOCKSIZE;k++){\n            P_element+=deviceShared[ty*blockSize+k]*deviceShared[stride+(k*blockSize+tx)];\n        }\n        __syncthreads();\n    }\n    if(y<width&&x<width)\n        P_device[y*width+x]=P_element;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);