"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[9131],{726:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>c,toc:()=>s});const c=JSON.parse('{"id":"cuda/calculate_time","title":"calculate_time","description":"---","source":"@site/docs/cuda/calculate_time.md","sourceDirName":"cuda","slug":"/cuda/calculate_time","permalink":"/docs/cuda/calculate_time","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/docs/cuda/calculate_time.md","tags":[],"version":"current","lastUpdatedAt":1740785860000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GPU","permalink":"/docs/cuda/other"},"next":{"title":"cuda stream","permalink":"/docs/cuda/cuda_stream"}}');var a=t(4848),r=t(8453);const d={},o=void 0,i={},s=[];function l(n){const e={code:"code",h1:"h1",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:"title: PyTorch \u81ea\u5b9a\u4e49 CUDA \u7b97\u5b50\u6559\u7a0b\u4e0e\u8fd0\u884c\u65f6\u95f4\u5206\u6790\ntags:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"work"}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h1,{id:"cuda\u7b97\u5b50\u5b9e\u73b0",children:"CUDA\u7b97\u5b50\u5b9e\u73b0"}),"\n",(0,a.jsx)(e.p,{children:"\u9996\u5148\u6700\u7b80\u5355\u7684\u5f53\u5c5eadd2.h\u548cadd2.cu\uff0c\u8fd9\u5c31\u662f\u666e\u901a\u7684CUDA\u5b9e\u73b0\u3002"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cuda",children:"void launch_add2(float *c,\n                 const float *a,\n                 const float *b,\n                 int n);\n\n__global__ void add2_kernel(float* c,\n                            const float* a,\n                            const float* b,\n                            int n) {\n    for (int i = blockIdx.x * blockDim.x + threadIdx.x; \\\n            i < n; i += gridDim.x * blockDim.x) {\n        c[i] = a[i] + b[i];\n    }\n}\n\nvoid launch_add2(float* c,\n                 const float* a,\n                 const float* b,\n                 int n) {\n    dim3 grid((n + 1023) / 1024);\n    dim3 block(1024);\n    add2_kernel<<<grid, block>>>(c, a, b, n);\n}\n"})}),"\n",(0,a.jsx)(e.h1,{id:"torch-c\u5c01\u88c5",children:"Torch C++\u5c01\u88c5"}),"\n",(0,a.jsx)(e.p,{children:"\u8fd9\u91cc\u6d89\u53ca\u5230\u7684\u662fadd2.cpp\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u529f\u80fd\u662f\u63d0\u4f9b\u4e00\u4e2aPyTorch\u53ef\u4ee5\u8c03\u7528\u7684\u63a5\u53e3\u3002"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'#include <torch/extension.h>\n#include "add2.h"\n\nvoid torch_launch_add2(torch::Tensor &c,\n                       const torch::Tensor &a,\n                       const torch::Tensor &b,\n                       int n) {\n    launch_add2((float *)c.data_ptr(),\n                (const float *)a.data_ptr(),\n                (const float *)b.data_ptr(),\n                n);\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def("torch_launch_add2",\n          &torch_launch_add2,\n          "add2 kernel warpper");\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"torch_launch_add2\u51fd\u6570\u4f20\u5165\u7684\u662fC++\u7248\u672c\u7684torch tensor\uff0c\u7136\u540e\u8f6c\u6362\u6210C++\u6307\u9488\u6570\u7ec4\uff0c\u8c03\u7528CUDA\u51fd\u6570launch_add2\u6765\u6267\u884c\u6838\u51fd\u6570\u3002"}),"\n",(0,a.jsx)(e.p,{children:"\u8fd9\u91cc\u7528pybind11\u6765\u5bf9torch_launch_add2\u51fd\u6570\u8fdb\u884c\u5c01\u88c5\uff0c\u7136\u540e\u7528cmake\u7f16\u8bd1\u5c31\u53ef\u4ee5\u4ea7\u751fpython\u53ef\u4ee5\u8c03\u7528\u7684.so\u5e93\u3002\u4f46\u662f\u6211\u4eec\u8fd9\u91cc\u4e0d\u76f4\u63a5\u624b\u52a8cmake\u7f16\u8bd1\uff0c\u5177\u4f53\u65b9\u6cd5\u770b\u4e0b\u9762\u7684\u7ae0\u8282\u3002"}),"\n",(0,a.jsx)(e.h1,{id:"python\u8c03\u7528",children:"Python\u8c03\u7528"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import time\nimport numpy as np\nimport torch\nfrom torch.utils.cpp_extension import load\n\ncuda_module = load(name="add2",\n                   sources=["add2.cpp", "add2.cu"],\n                   verbose=True)\n\n# c = a + b (shape: [n])\nn = 1024 * 1024\na = torch.rand(n, device="cuda:0")\nb = torch.rand(n, device="cuda:0")\ncuda_c = torch.rand(n, device="cuda:0")\n\nntest = 10\n\ndef show_time(func):\n    times = list()\n    res = list()\n    # GPU warm up\n    for _ in range(10):\n        func()\n    for _ in range(ntest):\n        # sync the threads to get accurate cuda running time\n        torch.cuda.synchronize(device="cuda:0")\n        start_time = time.time()\n        r = func()\n        torch.cuda.synchronize(device="cuda:0")\n        end_time = time.time()\n\n        times.append((end_time-start_time)*1e6)\n        res.append(r)\n    return times, res\n\ndef run_cuda():\n    cuda_module.torch_launch_add2(cuda_c, a, b, n)\n    return cuda_c\n\ndef run_torch():\n    # return None to avoid intermediate GPU memory application\n    # for accurate time statistics\n    a + b\n    return None\n\nprint("Running cuda...")\ncuda_time, _ = show_time(run_cuda)\nprint("Cuda time:  {:.3f}us".format(np.mean(cuda_time)))\n\nprint("Running torch...")\ntorch_time, _ = show_time(run_torch)\nprint("Torch time:  {:.3f}us".format(np.mean(torch_time)))\n'})}),"\n",(0,a.jsx)(e.p,{children:"\u8fd9\u91cc6-8\u884c\u7684torch.utils.cpp_extension.load\u51fd\u6570\u5c31\u662f\u7528\u6765\u81ea\u52a8\u7f16\u8bd1\u4e0a\u9762\u7684\u51e0\u4e2acpp\u548ccu\u6587\u4ef6\u7684\u3002\u6700\u4e3b\u8981\u7684\u5c31\u662fsources\u53c2\u6570\uff0c\u6307\u5b9a\u4e86\u9700\u8981\u7f16\u8bd1\u7684\u6587\u4ef6\u5217\u8868\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7cuda_module.torch_launch_add2\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5c01\u88c5\u597d\u7684\u63a5\u53e3\u6765\u8fdb\u884c\u8c03\u7528\u3002"}),"\n",(0,a.jsx)(e.h1,{id:"\u8fd0\u884c\u65f6\u95f4\u5206\u6790",children:"\u8fd0\u884c\u65f6\u95f4\u5206\u6790"}),"\n",(0,a.jsx)(e.p,{children:"\u6211\u4eec\u77e5\u9053\uff0cCUDA kernel\u51fd\u6570\u662f\u5f02\u6b65\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u5728CUDA\u51fd\u6570\u4e24\u7aef\u52a0\u4e0atime.time()\u6d4b\u8bd5\u65f6\u95f4\uff0c\u8fd9\u6837\u6d4b\u51fa\u6765\u7684\u53ea\u662f\u8c03\u7528CUDA api\u7684\u65f6\u95f4\uff0c\u4e0d\u5305\u62ecGPU\u7aef\u8fd0\u884c\u7684\u65f6\u95f4\u3002"}),"\n",(0,a.jsx)(e.p,{children:"\u6240\u4ee5\u6211\u4eec\u8981\u52a0\u4e0a\u7ebf\u7a0b\u540c\u6b65\u51fd\u6570\uff0c\u7b49\u5f85kernel\u4e2d\u6240\u6709\u7ebf\u7a0b\u5168\u90e8\u6267\u884c\u5b8c\u6bd5\u518d\u6267\u884cCPU\u7aef\u540e\u7eed\u6307\u4ee4\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u540c\u6b65\u6307\u4ee4\u52a0\u5728\u4e86python\u7aef\uff0c\u7528\u7684\u662ftorch.cuda.synchronize\u51fd\u6570\u3002"})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>o});var c=t(6540);const a={},r=c.createContext(a);function d(n){const e=c.useContext(r);return c.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:d(n.components),c.createElement(r.Provider,{value:e},n.children)}}}]);